<span style="display: none;">{{player.nickname}}</span> <span style="display: none;" id="playerId">{{player.id}}</span> <span style="display: none;" id="playercolor">{{player.color}}</span>
<div style="display: none;" id="wordCounter">{{player.wordCounter}}</div>
<div id="players">
    <table>
    <thead>
        <th>Place</th>
        <th>Player</th>
        <th>Word Count</th>
    </thead>
    <tbody></tbody>
    </table>
</div>
<h2>Available letters</h2>
<div id="letters"></div>
<h2>Words</h2>
<div id="words"></div>
<input type="text" id="word" placeholder="Type a word!">
<div id="feedback"></div>

<style>
    /*awesome css*/
    @import url(https://fonts.googleapis.com/css?family=Poppins);
    @import url(https://fonts.googleapis.com/css?family=Rubik);
    .body{font-family:'Rubik', sans-serif; font-size: 18pt; color:#777777;}
    h1, h2, h3, h4, h5, h6 {font-family:'Rubik', sans-serif; font-size: 22pt; color:#333333; text-align: center; margin:2% 0 1% 0;}
    #letters{font-family:'Poppins'; margin: 0 0 0 25%; width:50%; display:inline-block; }
    #available-letters-list{font-family:'Poppins';}
    .letter{font-family:'Poppins'; background: #eeeeee; border-radius: 5px; border: 2px solid gray; margin: 2px; width:53px; color:#777777; text-align: center; font-size:24pt;}
    #words{font-family:'Rubik'; width:54%; display:inline-block; text-align: center;   margin: 0 0 0 23%;}
    #words-list {font-family:'Rubik'; }
    ul{list-style-type: none; margin:auto; padding: 0;}
    .word{font-family:'Rubik'; background: #eeeeee; border-radius: 5px; border: 2px solid gray; margin: 2px; width:180px; color:#777777; text-align:center; font-size:21pt; }
    #content{font-family:'Rubik'}
    #input-form{font-family:'Rubik'; margin:auto; }
    #word{font-family: 'Rubik'; width: 25%; margin: 5% 0 0 37%; height: 80px; font-size: 40pt; border-radius: 8px; color: #777777; display: block;}
    #feedback{font-family:'Rubik'; font-size: 18pt; color:#dadada;}

    li {display:inline-block; margin: 0 4px 0 4px;}

    #words li {font-family:'Rubik'; background: #eeeeee; border-radius: 5px; border: 2px solid gray; margin: 2px; width:180px; color:#777777; text-align:center; font-size:21pt; }
    #letters li {font-family:'Poppins'; background: #eeeeee; border-radius: 5px; border: 2px solid gray; margin: 2px; width:53px; color:#777777; text-align: center; font-size:24pt;}

    ::-webkit-input-placeholder { text-align: center;}
    :-moz-placeholder { /* Firefox 18- */  text-align: center;  }
    ::-moz-placeholder {  /* Firefox 19+ */   text-align: center;  }
    :-ms-input-placeholder {     text-align: center; }
</style>
<script src="/socket.io/socket.io.js"></script>
<script src="http://code.jquery.com/jquery-2.2.0.min.js"></script>
<!-- <script src="js/alphabetHandler.js"></script> -->


<script>

    function isWordDone(text) {
        var arr = [];
        var regex = new RegExp('^' + text.toLowerCase());
        for (var i = 0; i < currWords.length; i++) {
            if (regex.test(currWords[i].toLowerCase()) && currWords[i].length == text.length) {
                return i;
            }
        }
        return -1;
    }

    function normalizeWord(index) {
        var word = document.getElementById('word' + index);
        word.innerHTML = htmlStripper(word.innerHTML);
    }

    function getMatchingWordsIndex(text) {
        var arr = [];
        var regex = new RegExp('^' + text.toLowerCase());
        for (var i = 0; i < currWords.length; i++) {
            if (regex.test(currWords[i].toLowerCase())) {
                arr.push(i);
            }
            else {
                normalizeWord(i);
            }
        }
        return arr;
    }

    // credits to Jibberboy2000 from Stack Overflow
    function htmlStripper(str) {
        str=str.replace(/<br>/gi, "\n");
        str=str.replace(/<p.*>/gi, "\n");
        str=str.replace(/<a.*href="(.*?)".*>(.*?)<\/a>/gi, " $2 (Link->$1) ");
        str=str.replace(/<(?:.|\s)*?>/g, "");
        return str;
    }

    function colorWord(text) {
        var arr = getMatchingWordsIndex(text);
        for (var i = 0; i < arr.length; i++) {
            var word = document.getElementById('word' + arr[i]);
            var wordTxt = word.innerHTML;

            // free the text from any html tags
            wordTxt = htmlStripper(wordTxt);
            if (text.length > 0) {
                var html = '';
                var color = document.getElementById('playercolor').innerHTML;
                html = '<span style="color: ' + color + ';">';
                // alert(wordTxt.length);
                for (var j = 0; j < wordTxt.length; j++) {
                    html += wordTxt[j];
                    if (j == text.length - 1) html += '</span>';
                }
                word.innerHTML = '';
                word.innerHTML = html;
            }
            else {
                word.innerHTML = wordTxt;
            }
        }
    }


    function removeLetter(letter, arr) {
        var obj = {};
        var index = arr.indexOf(letter);
        // console.log("deleted index " + index);
        if (index < 0) {
            obj.arr = arr;
            obj.success = false;
            return obj;
        }
        arr.splice(arr.indexOf(letter), 1);
        obj.arr = arr;
        obj.success = true;
        return obj;
    }



    function addLetter(letter, arr) {
        arr.push(letter);
        arr.sort();
        return arr;
    }


    //redefines the width and margin of the element that displays the alphabet
    function divResize(numberoOfLetters){
        var divWidth = document.getElementById("letters").style.width;
        console.log("divWidth: " + divWidth);
        //var currentWidth = (numberoOfLetters * 57px) + ((numberoOfLetters-1) * 2);
        //console.log("currentwidth: " + currentWidth);
        //var newMargin = (divWidth - currentWidth) / 2;
        //console.log("newmargin: " + newMargin);
        //document.getElementById('available-letters-list').css.attr('width', currentWidth);
        //document.getElementById('available-letters-list').css.attr('margin-left', newMargin + "!important");
    }

    // clear the input text box
    document.getElementById("word").value = "";

    // init client socket
    var socket = io();

    // important variables
    var currAlphabet;
    var currWords;
    var currPlayers;

    // update the alphabet after a player has used a letter
    socket.on('alphabet update', function(alphabet) {
        currAlphabet = alphabet;

        var lettersDiv = document.getElementById('letters');
        // alert(alphabet);
        lettersDiv.innerHTML = '';
        var ul = document.createElement('ul');
        for (var i = 0; i < alphabet.length; i++) {
            var li = document.createElement('li');
            ul.appendChild(li);
            li.innerHTML = alphabet[i];
        }
        lettersDiv.appendChild(ul);
    });

    // get the random set of words to be played with
    socket.on('wordset', function(words) {
        currWords = words;
        var wordsDiv = document.getElementById('words');
        wordsDiv.innerHTML = '';
        var ul = document.createElement('ul');
        for (var i = 0; i < words.length; i++) {
            var li = document.createElement('li');
            li.id = 'word' + i;
            ul.appendChild(li);
            li.innerHTML = words[i];
        }
        wordsDiv.appendChild(ul);
    });

    // set a new random word
    socket.on('new word', function(words, index) {
        currWords = words;
        var wordli = document.getElementById('word' + index);
        wordli.innerHTML = words[index];
        var inputtxt = document.getElementById('word');
        inputtxt.value = '';
        console.log('new words array: ' + currWords);
    });

    // update a player's word counter
    socket.on('update counter', function(player) {
        console.log('updating the counter', player.wordCounter);
        var wcounter = document.getElementById(player.id).getElementsByTagName('td')[2];
        wcounter.innerHTML = player.wordCounter;
    });

    // update the list of players
    socket.on('update players', function(players) {
        // pending to add: current word being typed
        currPlayers = players;
        console.log('updating players', players);
        var divPlayers = document.getElementById('players');
        var table = divPlayers.getElementsByTagName('table')[0];
        var tbody = table.getElementsByTagName('tbody')[0];
        tbody.innerHTML = '';
        for (var id in players) {
            if (players.hasOwnProperty(id)) {
                var tr = document.createElement('tr');
                tr.setAttribute('id', players[id].id);

                var tdplace = document.createElement('td');
                var tdnick = document.createElement('td');
                var tdwc = document.createElement('td');

                // place is not working yet
                var placenode = document.createTextNode(players[id].place);
                var nicknode = document.createTextNode(players[id].nickname);
                var wcnode = document.createTextNode(players[id].wordCounter);

                // appending party
                tdplace.appendChild(placenode);
                tdnick.appendChild(nicknode);
                tdwc.appendChild(wcnode);

                tr.appendChild(tdplace);
                tr.appendChild(tdnick);
                tr.appendChild(tdwc);

                tbody.appendChild(tr);
            }
        }
    });

    $("#word").keyup(function(event) {
        var text = document.getElementById('word').value;
        colorWord(text);
        var index = isWordDone(text);
        if (index != -1) {
            socket.emit('new word', index);
            var playerId = document.getElementById('playerId').innerHTML;
            socket.emit('update counter', playerId);
        }
    });

    // triggered event after user input
    $("#word").keypress(function(event) {
        divResize(currAlphabet.length);
        var text = document.getElementById('word').value;
        var lastLetter = String.fromCharCode(event.which);
        var success;

        // alert(event.which);
        if (event.which == 8) {
            // backslash key was pressed
            var deletedLetter = text.charAt(text.length - 1);
            console.log(deletedLetter);
            var arr = addLetter(deletedLetter.toLowerCase(), currAlphabet);
            socket.emit('alphabet update', arr);
            success = true;
        }
        else {
            var alphabetStructure = removeLetter(lastLetter.toLowerCase(), currAlphabet);
            success = alphabetStructure.success;
            var arr = alphabetStructure.arr;
            socket.emit('alphabet update', arr);
        }
        return success;
    });

</script>
